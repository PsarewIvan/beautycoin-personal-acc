{"version":3,"sources":["input.js","select.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["(() => {\n    const ACTIVE_CLASS = 'active';\n    const nodes = document.querySelectorAll('.js-input-node');\n\n    nodes.forEach((node) => {\n        const input = node.querySelector('.js-input');\n        const show = node.querySelector('.js-input-show');\n        const openIcon = node.querySelector('.js-input-icon-open');\n        const closedIcon = node.querySelector('.js-input-icon-closed');\n        const alert = node.querySelector('.js-input-alert');\n        const reset = node.querySelector('.js-input-reset');\n\n        show?.addEventListener('click', () => {\n            const type = input?.getAttribute('type');\n\n            if (type === 'password') {\n                input.setAttribute('type', 'text');\n                openIcon?.classList.remove('hidden');\n                closedIcon?.classList.add('hidden');\n            } else {\n                input.setAttribute('type', 'password');\n                openIcon?.classList.add('hidden');\n                closedIcon?.classList.remove('hidden');\n            }\n        });\n\n        input?.addEventListener('blur', (event) => {\n            if (event.target.value === '') {\n                alert?.classList.add(ACTIVE_CLASS);\n            } else {\n                alert?.classList.remove(ACTIVE_CLASS);\n            }\n        });\n\n        input?.addEventListener('input', (event) => {\n            if (event.target.value === '') {\n                reset?.classList.remove(ACTIVE_CLASS);\n\n                if (reset && show) {\n                    show.classList.remove('shift');\n                }\n            } else {\n                reset?.classList.add(ACTIVE_CLASS);\n                alert?.classList.remove(ACTIVE_CLASS);\n\n                if (reset && show) {\n                    show.classList.add('shift');\n                }\n            }\n        });\n\n        reset?.addEventListener('click', () => {\n            if (input) {\n                input.value = '';\n                reset?.classList.remove(ACTIVE_CLASS);\n            }\n\n            if (reset && show) {\n                show.classList.remove('shift');\n            }\n        });\n    });\n})();\n","(() => {\n    const selectsWrapper = document.querySelectorAll(\n        '.js-select-component-wrapper'\n    );\n\n    selectsWrapper.forEach((selectWrapper) => {\n        const select = selectWrapper.querySelector('.js-select-component');\n        const placeholder = select?.dataset.placeholder;\n        const options = select?.querySelectorAll('option');\n        const reset = selectWrapper?.querySelector('.js-select-reset');\n\n        const dataOptions = Array.from(options).map((option) => ({\n            text: option.innerHTML,\n            value: option.value,\n        }));\n\n        const slimSelect = new SlimSelect({\n            select,\n            settings: {\n                showSearch: false,\n            },\n            data: [\n                ...(placeholder\n                    ? [{ placeholder: true, text: placeholder }]\n                    : []),\n                ...dataOptions,\n            ],\n            events: {\n                afterChange: (evt) => {\n                    const value = evt?.[0]?.value;\n                    const arrow = selectWrapper?.querySelector('.ss-arrow');\n\n                    if (value) {\n                        reset?.classList.remove('hidden');\n                        arrow?.classList.add('hidden');\n                    }\n                },\n            },\n        });\n\n        reset?.addEventListener('click', () => {\n            if (slimSelect) {\n                const arrow = selectWrapper?.querySelector('.ss-arrow');\n\n                slimSelect.setSelected('', false);\n                reset.classList.add('hidden');\n                arrow.classList.remove('hidden');\n            }\n        });\n\n        const selectDiv = selectWrapper.querySelector(\n            `div[data-id=\"${slimSelect?.settings?.id}\"]`\n        );\n\n        select?.addEventListener('change', (event) => {\n            if (dataOptions.some(({ value }) => value === event.target.value)) {\n                selectDiv.classList.add('select-component_selected');\n            } else {\n                selectDiv.classList.remove('select-component_selected');\n            }\n        });\n\n        if (!placeholder) {\n            const arrow = selectWrapper?.querySelector('.ss-arrow');\n            selectDiv?.classList.add('select-component_selected');\n            reset?.classList.remove('hidden');\n            arrow?.classList.add('hidden');\n        }\n    });\n})();\n"]}